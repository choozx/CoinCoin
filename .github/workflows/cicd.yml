# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: project guild with Gradle

on:
  push:
    branches: [ "prod" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: make properties
      - run: cd ./src/main/resources
      - run: touch ./application-prod.yml
      - run: echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yml

      - name: make logback
      - run: cd ./src/main/resources
      - run: touch ./logback-prod.xml
      - run: echo "${{ secrets.LOGBACK_PROD }}" > ./logback-prod.xml

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build -x test

      - name: Docker image build
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN_KEY }}
          docker build -t app .
          docker tag app ${{ secrets.DOCKER_HUB_USERNAME }}/coincoin:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/coincoin:latest

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # pem 키
          # 도커 작업
          script: |
            docker stop coincoin
            docker rm coincoin
            docker rmi ${{ secrets.DOCKER_HUB_USERNAME }}/coincoin:latest
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/coincoin:latest
            docker run -n coincoin -d -e SPRING_PROFILES_ACTIVE=prod -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/coincoin:latest

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build